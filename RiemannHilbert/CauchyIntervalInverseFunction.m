(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



BeginPackage["RiemannHilbert`",{"RiemannHilbert`Common`"}];


CauchyInverseFunction;



Begin["Private`"];


P[n_]:= ToeplitzMatrix[- 0 Join[{0},Riffle[Table[1./i,{i,1,2 n+1,2}],0]][[;;n]],Join[{0},Riffle[Table[1./i,{i,1,2 n+1,2}],0]][[;;n]]];


CpT[fft_]:=ShiftMatrix[ZeroMatrix[fft//NegativeList//Length]~RightJoin~IdentityMatrix[fft//NonNegativeList//Length],{1,fft//Index}];


SgnArgCauchy[fft_ShiftList,z_]:=-1/(I \[Pi]) MapDot[z^#&,CpT[fft].ShiftMatrix[Transpose[P[Length[fft]]]-P[Length[fft]],{1,1} Index[fft]].(fft)];
SgnArgCauchy[lf_LFun,z_]:=SgnArgCauchy[lf//FFT,z];


SgnArgCauchyInverseFunction[fft_ShiftList,y_]:=Select[ComplexRoots[UnitCircle,-1/(I \[Pi])CpT[fft].ShiftMatrix[Transpose[P[Length[fft]]]-P[Length[fft]],{1,1} Index[fft]].(fft)//#-BasisShiftList[#,0] y&],Abs[#]<=1.&]//If[Length[#]>=1,#[[-1]],#]&;
SgnArgCauchyInverseFunction[lf_LFun,y_]:=SgnArgCauchyInverseFunction[lf//FFT,y];


CompanionCauchyInverseFunction[if_IFun?UnitIntervalFunQ,y_]:=SgnArgCauchyInverseFunction[2 SetLength[if,200 ]//LFun,y]//CircleToInterval;
CauchyInverseFunction[if_IFun?UnitIntervalFunQ,y_]:=
CompanionCauchyInverseFunction[if,y]//If[#==={},{},NewtonInverse[Cauchy[if,#]&,CauchyD[if,#]&,y,#]]&;
CauchyInverseFunction[if_IFun?RightEndpointInfinityQ,w_]:=MapFromInterval[if,CauchyInverseFunction[if//ToUnitInterval,w+Cauchy[if//ToUnitInterval,1]]];

StieljesInverseFunction[if_IFun,z_]:=CauchyInverseFunction[if,z/ (-2 \[Pi]\[NonBreakingSpace]I)];


End[];
EndPackage[];
